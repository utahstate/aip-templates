{
   "constantName": "AIPLicensurePrograms",
   "developerSecurity": [],
   "extendsPage": null,
   "fileTimestamp": "2024-09-24T23:24:34Z",
   "modelView": {
      "components": [
         {
            "resource": "virtualDomains.ActionItemContent",
            "name": "ActionItemContent",
            "type": "resource",
            "staticData": []
         },
         {
            "resource": "virtualDomains.ActionItemStatus",
            "name": "ActionItemStatus",
            "type": "resource",
            "staticData": []
         },
         {
            "resource": "virtualDomains.ActionItemReviewStatus",
            "name": "ActionItemReviewStatus",
            "type": "resource",
            "staticData": []
         },
         {
            "resource": "virtualDomains.AIPZipCodeCollector",
            "name": "ModelStudentLocation",
            "type": "resource",
            "staticData": []
         },
         {
            "readonly": false,
            "name": "popAID",
            "onLoad": "if ( typeof(window.params.actionItemId) != 'undefined') {\n    var aid = window.params.actionItemId;\n} else {\n   //temporary - for testing only.\n   window.params.actionItemId = 6;\n}\nsetTimeout( function(){ \n    $ActionItemId.$load();\n}, \n500);",
            "model": "ActionItemContent",
            "style": "hidden",
            "loadInitially": true,
            "type": "text",
            "parameters": {},
            "required": false,
            "validation": {}
         },
         {
            "readonly": false,
            "name": "ReviewStatus",
            "model": "ActionItemReviewStatus",
            "style": "hidden",
            "loadInitially": true,
            "type": "text",
            "parameters": {
               "actionitemid": "$$params.actionItemId"
            },
            "value": "gcraact_rvst_code",
            "required": false,
            "validation": {}
         },
         {
            "readonly": false,
            "name": "ActionItemId",
            "onLoad": "$ActionItemContentDetail.$load();",
            "model": "ActionItemContent",
            "style": "hidden",
            "loadInitially": false,
            "type": "text",
            "parameters": {
               "actionItemId": "$$params.actionItemId",
               "pageid": "$$params.id"
            },
            "value": "ACTION_ITEM_ID",
            "required": false,
            "validation": {}
         },
         {
            "resource": "virtualDomains.stuLovStates",
            "name": "stuLovStates",
            "type": "resource",
            "staticData": []
         },
         {
            "resource": "virtualDomains.stuLicensureProgramResponse",
            "name": "stuLicensureProgramResponse",
            "type": "resource",
            "staticData": []
         },
         {
            "components": [
               {
                  "name": "LiteralFormHeader",
                  "label": "",
                  "type": "literal",
                  "value": "Per state regulations the following information must be provided to studentsin route-to-licensure programs.  The degree program you have selected typically leads to licensure, and was designed to meetlicensing qualifications in the state of Utah. If you wish to work in another state within the UnitedStates, please review the qualifications for that state, and acknowledge receipt of this message below."
               },
               {
                  "submitLabel": "Submit",
                  "components": [
                     {
                        "sourceParameters": {},
                        "name": "SelectLicensureProgramState",
                        "sourceModel": "stuLovStates",
                        "model": "",
                        "label": "Intended state of practice",
                        "placeholder": "select state",
                        "loadInitially": true,
                        "type": "select",
                        "labelKey": "STATE_DESCRIPTION",
                        "valueKey": "STATE_CODE",
                        "value": "",
                        "required": true
                     }
                  ],
                  "nextButtonLabel": "Next",
                  "name": "FormLicensureProgram",
                  "showInitially": true,
                  "label": "",
                  "type": "form"
               },
               {
                  "name": "LiteralFormFooter",
                  "label": "",
                  "type": "literal",
                  "value": "Clicking on \"Acknowledge\" below verifies that you acknowledge that you are in a program that leads to licensure and know where to look up where it is valid."
               }
            ],
            "name": "BlockLicensureProgram",
            "showInitially": true,
            "label": "In which state do you intend to practice?",
            "type": "block"
         },
         {
            "components": [
               {
                  "allowDelete": false,
                  "components": [
                     {
                        "asHtml": true,
                        "name": "ActionItemContentDisplay",
                        "onLoad": "var contextSelector = '[page=\"AIPLicensurePrograms\"]';\nvar context = $(contextSelector);\n\nvar styleRules = [\n  \"#pbid-SelectLicensureProgramState-container { font-size: 1.10em; font-weight: bold; color: #4f585f; line-height: 1.4; padding-left: .75em;}\",\n  \"button.primary[disabled] { background-color: #ddd !important; }\",\n  \"fieldset { border: 0 none; padding: 1em 0; }\",\n  \".licensure-acknowledgement-submitted-message { padding: 1em .7em 0; font-size: 1.25em; }\",\n  \"div.pb-literal { margin: 2em 0; line-height: 1.4; }\",\n  \"span.pb-detail { margin: 2em 0; line-height: 1.4; display: block; }\",\n  \"legend { display: none; }\",\n  \".pagination-container { display: none; }\",\n  \"table { border: 0 none; }\",\n  \"td { padding: 5px 15px; }\",\n  \"th { padding: 5px 15px; }\",\n  \"thead tr { border-bottom: solid 1px #ddd; }\",\n  \"tbody tr:nth-child(even) { background-color: #eaeaea; }\",\n].join(\" \" + contextSelector + \" \");\n\n$(\"<\" + \"style>\" + styleRules + \"<\" + \"/style>\").appendTo(context);\n\nfunction removePracticingStateField() {\n  $('input[type=\"text\"]', context).closest('form').replaceWith('<div class=\"licensure-acknowledgement-submitted-message\">Zip Code has been submitted for this semester.</div>');\n  $('input[type=\"checkbox\"]', context).attr('disabled', 'disabled');\n}\n\nwindow.doUpdateLicensureProgram = function(event) {\n  // Autumn Canfield: I believe John Pope wrote this comment originally in the\n  // AIPZipCodeCollector page. Not sure why or what, but since this was based on\n  // that. Maybe it will be helpful someday:\n  //\n  // this isn't working... probably due to angular ng-click hook. not sure it matters though\n  // console.log(event);\n  // if(typeof $TextZipCode == 'undefined' || $TextZipCode.search(/^\\d{5}(?:[-\\s]\\d{4})?$/) < 0) {\n  //   alert(\"Invalid Zip Code\", {type:\"error\", flash:true});\n  //   event.preventDefault();\n  //   return false;\n  // }\n\n  $stuLicensureProgramResponse.post({ PIDM: '202240', STATE_CODE: $SelectLicensureProgramState }, null, function() {\n    alert(\"Licensure acknowledgement submitted successfully.\", { type: \"success\", flash: true });\n    removePracticingStateField();\n  }, function() {\n    alert($.i18n.prop(\"js.notification.error\"), { type: \"error\", flash: true });\n  });\n};\n\n$('#pbid-ActionItemContentDetail-save-button', context).attr('onclick', 'return doUpdateLicensureProgram(event);');\n\n// Handle checkbox/save button state based on selection of indended state of practice dropdown\n$(context).on(\n  \"change\",\n  'input[type=\"checkbox\"], input[type=\"text\"]',\n  function(event) {\n    var hasStateSelection = typeof $SelectLicensureProgramState !== \"undefined\";\n    var isChecked = $(\"input[type='checkbox']:checked\", context).length === 1;\n\n    if (isChecked && hasStateSelection) {\n      params.isResponseModified = true;\n      $(\"#pbid-ActionItemContentDetail-save-button\", context).removeAttr(\n        \"disabled\"\n      );\n    } else {\n      params.isResponseModified = false;\n      $(\"#pbid-ActionItemContentDetail-save-button\", context).attr(\n        \"disabled\",\n        \"disabled\"\n      );\n\n      if (!hasStateSelection) {\n        if (event.target.type == \"checkbox\") {\n          alert(\"Must select a state you intend to practice in.\", { type: \"error\", flash: true });\n        }\n        $('input[type=\"checkbox\"]', context).removeAttr(\"checked\");\n      }\n    }\n  }\n);\n\n// AIP code... changes radio to textbox and manages checkbox state based on AIP item status\n// AC: This is based on the AIP master template ActionItemContentDetail\nsetTimeout(function() {\n  var isCheckbox = $ActionItemContentDetail.STATUS_COUNT === 1 ? true : false;\n  if (isCheckbox) {\n    // console.log(\"need checkbox\");\n    var radio = $(\"#pbid-ActionItemStatusAgree-radio-0-0\", context);\n    radio[0].type = \"checkbox\";\n\n    // This is an addition not in the template:\n    // remove selection field\n    if ($(radio).is(':checked')) {\n      removePracticingStateField()\n    }\n  }\n  var isResponseReviewRequired = false;\n  if (typeof $ReviewStatus !== \"undefined\") {\n    isResponseReviewRequired = true;\n    if (isCheckbox) {\n      $(\"input[type='checkbox']\", context).prop({\n        disabled: isResponseReviewRequired,\n      });\n    } else {\n      $(\"input[type='radio']\", context).prop({\n        disabled: isResponseReviewRequired,\n      });\n    }\n  } else {\n    $(\"#pbid-ActionItemContentDetail-save-button\", context).click(function() {\n      var selectedResponse = isCheckbox\n        ? \"pbid-ActionItemStatusAgree-radio-0-0\"\n        : $(\"input[type='radio']:checked\", context)[0].id;\n      var responseElementId = selectedResponse.split(\n        \"pbid-ActionItemStatusAgree-radio-0-\"\n      );\n      isResponseReviewRequired =\n        data[parseInt(responseElementId[1])].STATUS_REV_REQ_IND === \"Y\"\n          ? true\n          : false;\n      if (isResponseReviewRequired) {\n        if (isCheckbox) {\n          $(\"input[type='checkbox']\", context).prop({\n            disabled: isResponseReviewRequired,\n          });\n        } else {\n          $(\"input[type='radio']\", context).prop({\n            disabled: isResponseReviewRequired,\n          });\n        }\n        $(\"#pbid-ActionItemContentDetail-save-button\", context).prop({\n          disabled: isResponseReviewRequired,\n        });\n      }\n    });\n  }\n}, 100); // AC: This is changed from 300 in the template, not sure why.",
                        "model": "ACTION_ITEM_CONTENT",
                        "loadInitially": true,
                        "type": "display",
                        "value": ""
                     },
                     {
                        "loadInitially": true,
                        "type": "radio",
                        "required": false,
                        "sourceParameters": {
                           "actionitemid": "$$params.actionItemId"
                        },
                        "name": "ActionItemStatusAgree",
                        "onLoad": "",
                        "model": "STATUS_RULE_ID",
                        "sourceModel": "ActionItemStatus",
                        "style": "",
                        "labelKey": "STATUS_RULE_LABEL_TEXT",
                        "valueKey": "STATUS_RULE_ID",
                        "onUpdate": "",
                        "value": ""
                     }
                  ],
                  "onError": "var errorMessage =response.data.errors? response.data.errors.errorMessage: null;if (errorMessage && errorMessage.indexOf(\"ORA-20000\") > -1) {  alert(\"An entry already exists for this virtual domain and role, cannot add a duplicate\", {type:\"error\"});} else {   alert( errorMessage?errorMessage:response.data, {type:\"error\"});}\n$(\"input[id^='pbid-ActionItemStatusAgree-radio']\").prop('disabled', false);\nwindow.params.isResponseLocked = false;",
                  "onSave": "",
                  "allowNew": false,
                  "documentation": "Displays data from virtual domain ActionItemContent",
                  "onSaveSuccess": "/*alert($.i18n.prop(\"js.notification.success\"), {type:\"success\", flash:true});*/\nwindow.params.saved=true;\n$ActionItemContentDetail.$load();",
                  "pageSize": 1,
                  "label": "",
                  "loadInitially": false,
                  "type": "detail",
                  "newRecordLabel": "",
                  "name": "ActionItemContentDetail",
                  "allowModify": true,
                  "onLoad": "var contextSelector = '[page=\"AIPLicensurePrograms\"]';\nvar context = $(contextSelector);\n\nvar styleRules = [\n  \"#pbid-SelectLicensureProgramState-container { font-size: 1.10em; font-weight: bold; color: #4f585f; line-height: 1.4; padding-left: .75em;}\",\n  \"button.primary[disabled] { background-color: #ddd !important; }\",\n  \"fieldset { border: 0 none; padding: 1em 0; }\",\n  \".licensure-acknowledgement-submitted-message { padding: 1em .7em 0; font-size: 1.25em; }\",\n  \"div.pb-literal { margin: 2em 0; line-height: 1.4; }\",\n  \"span.pb-detail { margin: 2em 0; line-height: 1.4; display: block; }\",\n  \"legend { display: none; }\",\n  \".pagination-container { display: none; }\",\n  \"table { border: 0 none; }\",\n  \"td { padding: 5px 15px; }\",\n  \"th { padding: 5px 15px; }\",\n  \"thead tr { border-bottom: solid 1px #ddd; }\",\n  \"tbody tr:nth-child(even) { background-color: #eaeaea; }\",\n].join(\" \" + contextSelector + \" \");\n\n$(\"<\" + \"style>\" + styleRules + \"<\" + \"/style>\").appendTo(context);\n\nfunction removePracticingStateField() {\n  $('input[type=\"text\"]', context).closest('form').replaceWith('<div class=\"licensure-acknowledgement-submitted-message\">Zip Code has been submitted for this semester.</div>');\n  $('input[type=\"checkbox\"]', context).attr('disabled', 'disabled');\n}\n\nwindow.doUpdateLicensureProgram = function(event) {\n  // Autumn Canfield: I believe John Pope wrote this comment originally in the\n  // AIPZipCodeCollector page. Not sure why or what, but since this was based on\n  // that. Maybe it will be helpful someday:\n  //\n  // this isn't working... probably due to angular ng-click hook. not sure it matters though\n  // console.log(event);\n  // if(typeof $TextZipCode == 'undefined' || $TextZipCode.search(/^\\d{5}(?:[-\\s]\\d{4})?$/) < 0) {\n  //   alert(\"Invalid Zip Code\", {type:\"error\", flash:true});\n  //   event.preventDefault();\n  //   return false;\n  // }\n\n  $stuLicensureProgramResponse.post({ PIDM: '202240', STATE_CODE: $SelectLicensureProgramState }, null, function() {\n    alert(\"Licensure acknowledgement submitted successfully.\", { type: \"success\", flash: true });\n    removePracticingStateField();\n  }, function() {\n    alert($.i18n.prop(\"js.notification.error\"), { type: \"error\", flash: true });\n  });\n};\n\n$('#pbid-ActionItemContentDetail-save-button', context).attr('onclick', 'return doUpdateLicensureProgram(event);');\n\n// Handle checkbox/save button state based on selection of indended state of practice dropdown\n$(context).on(\n  \"change\",\n  'input[type=\"checkbox\"], input[type=\"text\"]',\n  function(event) {\n    var hasStateSelection = typeof $SelectLicensureProgramState !== \"undefined\";\n    var isChecked = $(\"input[type='checkbox']:checked\", context).length === 1;\n\n    if (isChecked && hasStateSelection) {\n      params.isResponseModified = true;\n      $(\"#pbid-ActionItemContentDetail-save-button\", context).removeAttr(\n        \"disabled\"\n      );\n    } else {\n      params.isResponseModified = false;\n      $(\"#pbid-ActionItemContentDetail-save-button\", context).attr(\n        \"disabled\",\n        \"disabled\"\n      );\n\n      if (!hasStateSelection) {\n        if (event.target.type == \"checkbox\") {\n          alert(\"Must select a state you intend to practice in.\", { type: \"error\", flash: true });\n        }\n        $('input[type=\"checkbox\"]', context).removeAttr(\"checked\");\n      }\n    }\n  }\n);\n\n// AC: This is based on the AIP master template ActionItemContentDetail\n// AIP code... changes radio to textbox and manages checkbox state based on AIP item status\nsetTimeout(function() {\n  var isCheckbox = $ActionItemContentDetail && $ActionItemContentDetail.STATUS_COUNT === 1 ? true : false;\n  if (isCheckbox) {\n    //console.log(\"need checkbox\");\n    var radio = $(\"#pbid-ActionItemStatusAgree-radio-0-0\", context);\n    radio[0].type = \"checkbox\";\n\n    // This is an addition not in the template:\n    // remove selection field\n    if ($(radio).is(':checked')) {\n      removePracticingStateField()\n    }\n  }\n  var isResponseReviewRequired = false;\n  if (typeof $ReviewStatus !== \"undefined\") {\n    isResponseReviewRequired = true;\n    if (isCheckbox) {\n      $(\"input[type='checkbox']\", context).prop({\n        disabled: isResponseReviewRequired,\n      });\n    } else {\n      $(\"input[type='radio']\", context).prop({\n        disabled: isResponseReviewRequired,\n      });\n    }\n  } else {\n    $(\"#pbid-ActionItemContentDetail-save-button\", context).click(function() {\n      var selectedResponse = isCheckbox\n        ? \"pbid-ActionItemStatusAgree-radio-0-0\"\n        : $(\"input[type='radio']:checked\", context)[0].id;\n      var responseElementId = selectedResponse.split(\n        \"pbid-ActionItemStatusAgree-radio-0-\"\n      );\n      isResponseReviewRequired =\n        data[parseInt(responseElementId[1])].STATUS_REV_REQ_IND === \"Y\"\n          ? true\n          : false;\n      if (isResponseReviewRequired) {\n        if (isCheckbox) {\n          $(\"input[type='checkbox']\", context).prop({\n            disabled: isResponseReviewRequired,\n          });\n        } else {\n          $(\"input[type='radio']\", context).prop({\n            disabled: isResponseReviewRequired,\n          });\n        }\n        $(\"#pbid-ActionItemContentDetail-save-button\", context).prop({\n          disabled: isResponseReviewRequired,\n        });\n      }\n    });\n  }\n}, 100); // AC: This is changed from 300 in the template, not sure why.",
                  "model": "ActionItemContent",
                  "allowReload": false,
                  "parameters": {
                     "actionitemid": "$$params.actionItemId",
                     "pageid": "$$params.id"
                  }
               }
            ],
            "name": "PolicyBlock",
            "showInitially": true,
            "style": "",
            "label": "",
            "type": "block"
         }
      ],
      "name": "AIPLicensurePrograms",
      "style": "",
      "label": "",
      "type": "page",
      "importCSS": ""
   },
   "owner": "A00350677",
   "pageRoles": [
      {
         "roleName": "ADMIN-GPBADMN",
         "allow": false
      },
      {
         "roleName": "ALLROLES",
         "allow": true
      }
   ]
}